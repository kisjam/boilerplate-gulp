{% extends '_layouts/_default.njk' %}
{% set pageTitle = 'Boilerplate for static website' %}
{% set pageDescription = '' %}
{% set pagekeywords = '' %}
{%
set breadcrumbs = [
{item: 'トップページ', href: '/'}
]
%}

{% block css -%}{% endblock %}

{% block contents -%}

{%- include '_partials/_breadcrumb.njk' %}

<main class="main">
	<section>

		<h2>概要</h2>
		<p>静的サイトを作り始める際のスターターキットと、個人的な運用ルールまとめです。</p>
		<div class="btn">
			<a href="#">Download</a>
		</div>

	</section>
	<section>
		<h2>コーディングガイドライン</h2>

		<section>
			<h3>基本</h3>
			<ul>
				<li>Gulp</li>
				<li>Numjucks</li>
				<li>Sass</li>
				<li>Typescript</li>
			</ul>
		</section>
		<section>
			<h3>CSS</h3>

			<section>
				<h4>設計</h4>
				<p>設計思想はFLOCSSをベースとしています、静的サイトの制作にあたりある程度の容易性を持つために新たなルールを設けました。</p>

				<section>
					<h5>Foundation</h5>
					<blockquote>
						<p>Reset.cssやNormalize.cssなどを用いたブラウザのデフォルトスタイルの初期化や、プロジェクトにおける基本的なスタイルを定義します。</p>
					</blockquote>

					<section>
						<h6>容易性</h6>
						<p>ページの量産やCMS対応を考慮して、主要なスタイルを要素に加える場合がある。ただし<code>:not([class])</code>を使用し利用範囲を制限します。</p>
						<p>UtilityやModifireの指定をする場合は元のコンポーネントクラスをつけた上で行う想定です。</p>
						<pre>
							<h2 class="title -lg">Title</h2>
						</pre>
					</section>
				</section>
				<section>
					<h5><span class="tag-new">NEW</span> Global</h5>
					<p>@importの廃止に伴い、各パーツで使用するグローバル変数、mixinを定義します。</p>
				</section>
				<section>
					<h5>Layout</h5>
					<blockquote>
						<p>ページを構成するヘッダーやメインのコンテンツエリア、サイドバーやフッターといったプロジェクト共通のコンテナーブロックのスタイルを定義します。</p>
					</blockquote>

					<p>余白や幅など装飾を持たない大枠のレイアウトを定義します。例えばヘッダー内で使用されるナビゲーションやボタン等はComponentもしくはProjectに定義します。</p>
				</section>
				<section>
					<h5>Object - Component</h5>
					<blockquote>
						<q>再利用できるパターンとして、小さな単位のモジュールを定義します。</q>
						<q>出来る限り、最低限の機能を持ったものとして定義されるべきであり、それ自体が固有の幅や色などの特色を持つことは避けるのが望ましいです。</q>
					</blockquote>

					<p>文脈が限定されていない、再利用できるモジュールはここに分類しています。粒度や文脈によって判断がブレるため、悩んだらProjectでいいです。</p>
					<p><code>inner</code>や<code>section</code>などのレイアウト目的の汎用クラスもここに入れます。</p>

					<section>
						<h6>marginについて</h6>
						<p>基本的にComponentにmarginを与えない方が良い派です。が、都度レイアウト用にスタイル（またはwrap）するのは大変なので容易性の観点からmarginを設定することを許容します。</p>
						<p>見出しの上にリード文が入る場合など余白が変わる場合はモディファイアか隣接セレクタ、または要素をラップしレイアウトスタイルを設定します。</p>

						<p class="lead">foo</p>
						<h2 class="title">hoge</h2>

						<p class="lead">foo</p>
						<h2 class="title -with-lead">hoge</h2>

						<p class="lead">foo</p>
						<h2 class="title mt-0">hoge</h2>

						<section class="section">
							<div class="section__header">
								<div class="section__lead">
									<p class="lead">foo</p>
								</div>
								<div class="section__title">
									<h2 class="title">hoge</h2>
								</div>
							</div>
						</section>
					</section>
				</section>
				<section>
					<h5>Object - Project</h5>
					<blockquote>
						<p>プロジェクト固有のパターンであり、いくつかのComponentと、それに該当しない要素によって構成されるものを定義します。</p>
					</blockquote>
					<p>大体ここに収まります。極論崩壊するくらいなら全部ここでもいいです。</p>

					<section>
						<h6>分類の難しさ（Project? Component?）</h6>
						<p>仮に正確に分類できなくても大丈夫、粒度を誤って「パンくず」がどちらに分類されてもさほど影響はないので悩みすぎない</p>
						<ul>
							<li>文脈に依存している場合や固有の要素はプロジェクト</li>
							<li>文脈に依存しない再利用できるレイアウトやモジュールはコンポネート</li>
						</ul>
						<p>とざっくり考えています。</p>

						<table>
							<caption>早見表</caption>
							<tbody>
								<tr>
									<th>ローカルナビ</th>
									<td>Component</td>
								</tr>
								<tr>
									<th>cvエリア</th>
									<td>Project</td>
								</tr>
								<tr>
									<th>トップページのメインビジュアル</th>
									<td>Project</td>
								</tr>
								<tr>
									<th>下層ページのヘッダー</th>
									<td>Project</td>
								</tr>
								<tr>
									<th>ぱんくず</th>
									<td>Project</td>
								</tr>
								<tr>
									<th>ヘッダー内でだけ出現するボタン</th>
									<td>Project</td>
								</tr>
								<tr>
									<th>アコーディオン</th>
									<td>Component</td>
								</tr>
								<tr>
									<th>FAQのアコーディオン</th>
									<td>Project</td>
								</tr>
							</tbody>
						</table>
					</section>
				</section>
				<section>
					<h5>Object - Utility</h5>
					<p>Tailwindを参考にある程度Utilityを予め用意しています。汎用レイアウトや左右揃え、表の幅などに使用することを想定します。</p>
					<p>気にせず使って良いとします。ただし複数回同じ指定をする場合はそれをProjectやModifireに設定することを検討します。</p>

					<section>
						<h6><code>!important</code>について</h6>
						<p>使用禁止。ただ、詳細度が高い要素に対して使用することを想定して断腸の思いで一部Utility（width, margin）にimportantをつけています。</p>
						<p>Sassが@layerに対応した際にこの問題は解消される予定です。</p>
					</section>
				</section>
			</section>
			<section>
				<h4>Grid or Flex?</h4>
				<p>対象のコンテンツを一列または一行に収めたい場合はFlex、そうでなければGridを使います。</p>
			</section>
		</section>
	</section>

</main>

{%- endblock %}

{% block js -%}{% endblock %}
